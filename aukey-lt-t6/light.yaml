# Backup access for hard-to-reach boards
wifi:
  ap:
    ssid: ${name}
    password: !secret ap-light-kennel
captive_portal:

packages:
  board: !include c3.yaml
  base: !include base.yaml

esphome:
  on_boot:
  # White off, RGB to amber @ early boot
  - priority: 600
    then:
      - light.control:
          id: light_rgb
          state: ON
          brightness: 50%
          red: 50%
          blue: 0%
          green: 25%
      - light.control:
          id: light_white
          state: OFF
          brightness: 100%
  # RGB to 50% (and trigger on_turn_on) @ boot complete
  - priority: -100
    then:
      - light.control:
          id: light_rgb
          state: ON
          brightness: 50%

globals:
  # Bool to track RGB vs White mode
  - id: color_mode
    type: bool
    initial_value: "true"
  # Store the effect while dimming
  - id: last_effect
    type: std::string

# Touch control
binary_sensor:
  - platform: gpio
    id: touch
    name: "Touch"
    icon: mdi:gesture-tap
    pin:
      number: GPIO06
      inverted: true
    on_multi_click:
    - timing:
        - ON for at most 1s
        - OFF for at most 1s
        - ON for at most 1s
        - OFF for at least 0.2s
      then:
        - light.toggle: light_white
    - timing:
        - ON for at most 1s
        - OFF for at least 0.2s
      then:
        - light.toggle: light_rgb
    - timing:
        - ON for at least 1s
      then:
          # Disable current effect for better feedback while dimming
          # The lambda is equivalent to this yaml, but with a dynamic id
          #- globals.set:
          #    id: last_effect
          #    value: !lambda return id(light_rgb).get_effect_name();
          #- light.control:
          #    id: light_rgb
          #    effect: none
        - lambda: |-
            esphome::light::LightState* light_id = (id(color_mode)) ? id(light_rgb) : id(light_white);
            id(last_effect) = light_id->get_effect_name();
            auto call = light_id->make_call();
            call.set_effect("none");
            call.perform();
        # Dim 1% every 0.1 seconds
        # Turn full-off and reset brightness to 100% if dimmed below 1%
        - while:
            condition:
              - binary_sensor.is_on: touch
            then:
              # The lambda is equivalent to this yaml, but with a dynamic id
              #- light.dim_relative:
              #    id: light_rgb
              #    relative_brightness: -1%
              #    transition_length: 0.1s
              - lambda: |-
                  esphome::light::LightState* light_id = (id(color_mode)) ? id(light_rgb) : id(light_white);
                  float bright = light_id->current_values.get_brightness() - 0.01f;
                  auto call = light_id->make_call();
                  call.set_transition_length(100);
                  if (bright < 0.01f) {
                    call.set_state(false);
                    call.set_brightness(1.0f);
                  } else {
                    call.set_brightness(bright);
                  }
                  call.perform();
              - delay: 0.1s
        # Restore previous effect
        # The lambda is equivalent to this yaml, but with a dynamic id
        #- light.control:
        #    id: light_rgb
        #    effect: !lambda return id(last_effect);
        - lambda: |-
            esphome::light::LightState* light_id = (id(color_mode)) ? id(light_rgb) : id(light_white);
            auto call = light_id->make_call();
            call.set_effect(id(last_effect));
            call.perform();

output:
  # White output
  - platform: ledc
    id: lamp_white
    pin:
      number: GPIO02
      ignore_strapping_warning: true

  # Main RGB outputs
  - platform: ledc
    id: lamp_red
    pin: GPIO03
  - platform: ledc
    id: lamp_blue
    pin: GPIO04
  - platform: ledc
    id: lamp_green
    pin: GPIO05

light:
  # Main white light
  - platform: monochromatic
    id: light_white
    name: "White"
    icon: mdi:lamp-outline
    output: lamp_white
    restore_mode: ALWAYS_OFF
    default_transition_length: 1s
    effects:
      - random:
      - pulse:
      - strobe:
      - flicker:
    on_turn_on:
      then:
        - globals.set:
            id: color_mode
            value: "false"
        - light.control:
            id: light_rgb
            state: OFF

  # Main RGB light
  - platform: rgb
    id: light_rgb
    name: "RGB"
    icon: mdi:lava-lamp
    red: lamp_red
    green: lamp_green
    blue: lamp_blue
    restore_mode: ALWAYS_OFF
    default_transition_length: 0.5s
    effects:
      - random:
          transition_length: 5s
          update_interval: 7s
      - pulse:
      - strobe:
      - flicker:
    on_turn_on:
      then:
        - globals.set:
            id: color_mode
            value: "true"
        - light.control:
            id: light_white
            state: OFF
        - delay: 0.5s
        - light.control:
            id: light_rgb
            effect: random
